name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
            persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Clean up workspace
        run: |
          rm -rf ./*

      - name: Set up SSH key and directory
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/private_key
          chmod 600 ~/.ssh/private_key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Check Github User
        run: |
          git --version
          git config user.username 'abdullah-zia-22'
          git config user.email 'sipra58@gmail.com'
          git config user.username
          git config user.email

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |    
            # Navigate to the directory where your app will reside
            cd /var/www/backend/

            # Pull the latest code from the current repository
            git config --global user.username "abdullah-zia-22"
            git config --global user.email "sipra58@gmail.com"

            #dynamic repo name
            folder_name=$(basename ${{ github.repository }})
            echo "Folder name is: $folder_name"

            #repo configuration
            sudo rm -rf /var/www/backend/$folder_name
            cd /var/www/backend/
            sudo chmod 777 /var/www/backend
            repo_url="https://github.com/${{ github.repository }}.git"
            echo "repo url is: $repo_url"
            git remote set-url origin $repo_url
            git clone $repo_url

            
            
            # Pull the latest code from the current repository
            cd /var/www/backend/$folder_name/
            pip3 install virtualenv
            virtualenv env
            source env/bin/activate
            pip3 install flask gunicorn
            pip3 install -r requirements.txt
            deactivate

            #wsgi.py file
            sudo echo 'from api import app
            # RUN API
            if __name__ == "__main__":
                app.run(debug=True) ' > wsgi.py


            # Set up the MySQL database
            cd /var/www/backend/$folder_name/Database
            sudo mysql  < schema.sql
            sudo mysql  < data.sql
            sudo mysql << EOF
            GRANT ALL PRIVILEGES ON ai_doc_gen.* TO 'app'@'localhost';
            EOF

            # Create a systemd service unit file for your app
            sudo su
            service_name="${folder_name//-/_}"
            cd /etc/systemd/system/
            sudo chmod 777 /etc/systemd/system/
            sudo rm /etc/systemd/system/$service_name.service
            sudo echo "
            [Unit]
            #  specifies metadata and dependencies
            Description=Gunicorn instance to serve myproject
            After=network.target
            # tells the init system to only start this after the networking target has been reached
            # We will give our regular user account ownership of the process since it owns all of the relevant files
            [Service]
            # Service specify the user and group under which our process will run.
            User=root
            # give group ownership to the www-data group so that Nginx can communicate easily with the Gunicorn processes.
            Group=www-data
            # We'll then map out the working directory and set the PATH environmental variable so that the init system knows where our the executables for the process are located (within our virtual environment).
            WorkingDirectory=/var/www/backend/$folder_name/
            Environment="PATH=/var/www/backend/$folder_name/env/bin"
            # We'll then specify the commanded to start the service
            ExecStart=/var/www/backend/$folder_name/env/bin/gunicorn --workers 3 --bind unix:app.sock -m 007 wsgi:app
            # This will tell systemd what to link this service to if we enable it to start at boot. We want this service to start when the regular multi-user system is up and running:
            [Install]
            WantedBy=multi-user.target
            " > /etc/systemd/system/$service_name.service

            # Enable and start the systemd service
            sudo systemctl start $service_name.service
            sudo systemctl enable $service_name.service

            # Configure Nginx to reverse proxy to your app
            sudo su
            cd /etc/nginx/sites-available/
            sudo chmod 777 /etc/nginx/sites-available
            sudo rm /etc/nginx/sites-available/$service_name
            sudo echo "server {
            listen ${{ secrets.DEPLOY_PORT }};
            server_name ${{ secrets.EC2_HOST }};
            
            location / {
              include proxy_params;
              proxy_pass http://unix:/var/www/backend/$folder_name/app.sock;
                }
            } " > $service_name

            cd /etc/nginx/sites-enabled/
            sudo chmod 777 /etc/nginx/sites-enabled/
            sudo rm /etc/nginx/sites-enabled/$service_name
            sudo ln -s /etc/nginx/sites-available/$service_name /etc/nginx/sites-enabled/

            sudo firewall-cmd --add-port ${{ secrets.DEPLOY_PORT }}/tcp 
            sudo systemctl restart $service_name
            sudo systemctl daemon-reload
            sudo systemctl restart $service_name
            sudo systemctl restart nginx
